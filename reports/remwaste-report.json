{
  "collection": {
    "_": {
      "postman_id": "35d7ae41-9704-4c68-b0e8-2c4eccfef7d0",
      "exporter_id": "16511776"
    },
    "item": [
      {
        "id": "d2c8da91-2113-4276-8124-4e2e739ee63f",
        "name": "Login Test",
        "request": {
          "url": {
            "path": [
              "users",
              "login"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"user\": {\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n  }\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "aa07e89e-e834-46d0-b37e-7bb20b9f8be5",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const res = pm.response.json();\r",
                "const expected = pm.iterationData.get(\"expected\");\r",
                "const email = pm.iterationData.get(\"email\");\r",
                "const username = pm.iterationData.get(\"username\");\r",
                "\r",
                "// 1. Test: Basic status code check\r",
                "pm.test(\"Status and response validation\", function () {\r",
                "    if (expected === \"success\") {\r",
                "        pm.response.to.have.status(200);\r",
                "        pm.expect(res.user.email, \"Returned email does not match test data\").to.eql(email);\r",
                "        pm.expect(res.user.username, \"Returned username does not match test data\").to.eql(username);\r",
                "        pm.environment.set(\"token\", res.user.token);\r",
                "        \r",
                "    } else if (expected === \"wrong_credentials\") {\r",
                "        pm.response.to.have.status(422);\r",
                "        pm.expect(res.errors.body[0]).to.include(\"Wrong email/password\");\r",
                "    } else if (expected === \"user_not_found\") {\r",
                "        pm.response.to.have.status(404);\r",
                "        pm.expect(res.errors.body[0]).to.include(\"Email not found\");\r",
                "    } \r",
                "});\r",
                "\r",
                "// 2. Test: Schema validation for successful response\r",
                "pm.test(\"Response schema is valid for success\", function () {\r",
                "    if (expected === \"success\") {\r",
                "        pm.expect(res).to.have.property(\"user\");\r",
                "        pm.expect(res.user).to.have.all.keys(\"email\", \"username\", \"bio\", \"image\", \"token\");\r",
                "    }\r",
                "});\r",
                "\r",
                "// 3. Test: Ensure user object is not present in negative responses\r",
                "pm.test(\"No user object in failure responses\", function () {\r",
                "    if (expected !== \"success\") {\r",
                "        pm.expect(res).to.not.have.property(\"user\");\r",
                "    }\r",
                "});\r",
                ""
              ],
              "_lastExecutionId": "cbd119ac-d6f6-430f-80a3-b4844f97f0fd"
            }
          }
        ]
      },
      {
        "id": "9402a2fc-aebb-4dc6-b0c3-99ab777066b0",
        "name": "GET /user – profile check",
        "request": {
          "url": {
            "path": [
              "user"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Token {{token}}"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "95b08e7d-05db-4cf0-8d82-e843538b0d51",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const res = pm.response.json();\r",
                "\r",
                "// 1. Test: Basic status code check\r",
                "pm.test(\"Get User success - status 200\", () => {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "// 2. Test: Schema validation for successful response\r",
                "pm.test(\"Response has user object with required fields\", () => {\r",
                "    pm.expect(res).to.have.property(\"user\");\r",
                "    pm.expect(res.user).to.have.all.keys(\"username\", \"bio\", \"image\", \"token\", \"email\");\r",
                "});"
              ],
              "_lastExecutionId": "a7c0bf4a-8042-41ba-b6ec-62dc6c488836"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "5869ba88-200d-4989-b2d0-998c7eea4345",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                ""
              ],
              "_lastExecutionId": "a2bfd093-469d-4287-9952-6c4815d5fb49"
            }
          }
        ]
      },
      {
        "id": "27be3015-e927-4b60-b8aa-9fb81d2d26cf",
        "name": "POST /articles – Create Article",
        "request": {
          "url": {
            "path": [
              "articles"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Token {{token}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"article\": {\r\n    \"title\": \"Title{{random}}\",\r\n    \"description\": \"description\",\r\n    \"body\": \"body\",\r\n    \"tagList\": [\"jaca\", \"testing\"]\r\n  }\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ebb2346e-5657-4105-856a-04091d51b812",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.collectionVariables.set(\"random\", Math.floor(Math.random() * 100000));"
              ],
              "_lastExecutionId": "a275bdf1-b2a6-452d-a11b-afc6fddc959a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39d82dd9-ae73-495f-957e-f7b620b1b7c9",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const res = pm.response.json();\r",
                "\r",
                "// 1. Test: status code\r",
                "pm.test(\"Status code is 201\", () => {\r",
                "    pm.response.to.have.status(201);\r",
                "});\r",
                "\r",
                "// 2. Test: Schema validation for successful response\r",
                "pm.test(\"Article object has all required keys\", () => {\r",
                "    pm.expect(res).to.have.property(\"article\");\r",
                "\r",
                "    // Check keys of article\r",
                "    pm.expect(res.article).to.have.all.keys(\r",
                "        \"slug\",\r",
                "        \"title\",\r",
                "        \"description\",\r",
                "        \"body\",\r",
                "        \"createdAt\",\r",
                "        \"updatedAt\",\r",
                "        \"tagList\",\r",
                "        \"author\",\r",
                "        \"favorited\",\r",
                "        \"favoritesCount\"\r",
                "    );\r",
                "\r",
                "    // Check author keys\r",
                "    pm.expect(res.article.author).to.have.all.keys(\r",
                "        \"username\",\r",
                "        \"bio\",\r",
                "        \"image\",\r",
                "        \"following\",\r",
                "        \"followersCount\"\r",
                "    );\r",
                "\r",
                "    // Save slug for use in update/delete requests\r",
                "    pm.environment.set(\"slug\", res.article.slug);\r",
                "});\r",
                ""
              ],
              "_lastExecutionId": "c085524b-64f8-4a57-9e3d-69a273fe9100"
            }
          }
        ]
      },
      {
        "id": "1bec81c6-64e3-48ee-bcb6-c8a00ae7ef53",
        "name": "PUT /articles/:slug – Update Article",
        "request": {
          "url": {
            "path": [
              "articles",
              "{{slug}}"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Token {{token}}"
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"article\": {\r\n    \"title\": \"{{slug}} - updated\",\r\n    \"description\": \"updated description\",\r\n    \"body\": \"updated body\",\r\n    \"tagList\": [\"jaca\", \"testing\"]\r\n  }\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "cc07c821-f900-475a-81cf-7003e15644cd",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Test 1: Status code is 200\r",
                "pm.test(\"Status code is 200\", () => {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "// Test 2: Schema validation for successful response and updated field validation\r",
                "pm.test(\"Article Updated: keys and updated fields\", () => {\r",
                "    const res = pm.response.json();\r",
                "\r",
                "    // Check article keys\r",
                "    pm.expect(res).to.have.property(\"article\");\r",
                "    pm.expect(res.article).to.have.all.keys(\r",
                "        \"slug\",\r",
                "        \"title\",\r",
                "        \"description\",\r",
                "        \"body\",\r",
                "        \"createdAt\",\r",
                "        \"updatedAt\",\r",
                "        \"tagList\",\r",
                "        \"author\",\r",
                "        \"favorited\",\r",
                "        \"favoritesCount\"\r",
                "    );\r",
                "\r",
                "    // Check updated values\r",
                "    pm.expect(res.article.title).to.include(\"updated\");\r",
                "    pm.expect(res.article.description).to.eql(\"updated description\");\r",
                "    pm.expect(res.article.body).to.eql(\"updated body\");\r",
                "    pm.expect(res.article.tagList).to.include(\"jaca\");\r",
                "\r",
                "    // Save updated slug\r",
                "    pm.environment.set(\"slug\", res.article.slug);\r",
                "});\r",
                ""
              ],
              "_lastExecutionId": "70fa1f23-f1e4-4938-96c2-66f5088abcb7"
            }
          }
        ]
      },
      {
        "id": "d7c7feb0-18cf-4298-98f1-25e77e3da134",
        "name": "DELETE /articles/:slug – Delete Article",
        "request": {
          "url": {
            "path": [
              "articles",
              "{{slug}}"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Token {{token}}"
            }
          ],
          "method": "DELETE"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "16d7599c-ddbf-41fa-920e-e6cf17d41aa1",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Test 1: Status code is 200\r",
                "pm.test(\"Status code is 200\", () => {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "// Test 2: Schema validation for successful response and article Deleted message validation\r",
                "pm.test(\"Article Deleted message is correct\", () => {\r",
                "    const res = pm.response.json();\r",
                "\r",
                "    pm.expect(res).to.have.property(\"message\");\r",
                "    pm.expect(res.message).to.have.property(\"body\").that.is.an(\"array\");\r",
                "    pm.expect(res.message.body[0]).to.include(\"Article deleted successfully\");\r",
                "});\r",
                ""
              ],
              "_lastExecutionId": "0ec096d8-4d6d-4542-a658-c5432cf9671c"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "6058fb91-b4df-4f34-835a-7ebc14bc60ad",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b504d42-22be-4dc0-9905-216139cc2d46"
            }
          }
        ]
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "39274d16-47d4-42a4-aaff-89194d9507ca",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            ""
          ],
          "_lastExecutionId": "1c5fec2f-1c89-4cfe-aae9-64c23f32ccd2"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "0791c139-3ca0-4a5e-b999-ddb2cf5632a0",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            ""
          ],
          "_lastExecutionId": "2aea8308-ecbf-44e1-bb09-0727749bb2a4"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "",
        "key": "random"
      }
    ],
    "info": {
      "_postman_id": "35d7ae41-9704-4c68-b0e8-2c4eccfef7d0",
      "name": "remwaste-api-framework",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-07-23T08:32:42.898Z",
      "postman_exported_using": "Postman/11.55.2"
    },
    "id": "cfd40d41-311f-4f4e-bc66-bb2c508d5374",
    "name": "Remwaste ENV",
    "values": [
      {
        "type": "any",
        "value": "https://conduit-realworld-example-app.fly.dev/api",
        "key": "base_url"
      },
      {
        "type": "any",
        "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5pcHVuYUBnbWFpbC5jb20iLCJpYXQiOjE3NTMyNTk1OTJ9.omwuiMu_ZM5Eg_3DlsDuNEz_uVrShN34Sh7I9mj7VdY",
        "key": "token"
      },
      {
        "type": "any",
        "value": "title21385---updated",
        "key": "slug"
      }
    ]
  },
  "globals": {
    "id": "e5cc4e48-b154-4c5d-873c-8bc6438c21ba",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 54,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 33,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 24,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 280.73333333333335,
      "responseMin": 174,
      "responseMax": 537,
      "responseSd": 98.42592251141069,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1753259591548,
      "completed": 1753259596947
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 5,
          "cycles": 3,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1788fdfe-a63c-4f83-8377-4964ebcae800",
          "httpRequestId": "3f12b39d-55b3-45cd-bc63-b9836653ee5f"
        },
        "item": {
          "id": "d2c8da91-2113-4276-8124-4e2e739ee63f",
          "name": "Login Test",
          "request": {
            "url": {
              "path": [
                "users",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"user\": {\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n  }\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aa07e89e-e834-46d0-b37e-7bb20b9f8be5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const res = pm.response.json();\r",
                  "const expected = pm.iterationData.get(\"expected\");\r",
                  "const email = pm.iterationData.get(\"email\");\r",
                  "const username = pm.iterationData.get(\"username\");\r",
                  "\r",
                  "// 1. Test: Basic status code check\r",
                  "pm.test(\"Status and response validation\", function () {\r",
                  "    if (expected === \"success\") {\r",
                  "        pm.response.to.have.status(200);\r",
                  "        pm.expect(res.user.email, \"Returned email does not match test data\").to.eql(email);\r",
                  "        pm.expect(res.user.username, \"Returned username does not match test data\").to.eql(username);\r",
                  "        pm.environment.set(\"token\", res.user.token);\r",
                  "        \r",
                  "    } else if (expected === \"wrong_credentials\") {\r",
                  "        pm.response.to.have.status(422);\r",
                  "        pm.expect(res.errors.body[0]).to.include(\"Wrong email/password\");\r",
                  "    } else if (expected === \"user_not_found\") {\r",
                  "        pm.response.to.have.status(404);\r",
                  "        pm.expect(res.errors.body[0]).to.include(\"Email not found\");\r",
                  "    } \r",
                  "});\r",
                  "\r",
                  "// 2. Test: Schema validation for successful response\r",
                  "pm.test(\"Response schema is valid for success\", function () {\r",
                  "    if (expected === \"success\") {\r",
                  "        pm.expect(res).to.have.property(\"user\");\r",
                  "        pm.expect(res.user).to.have.all.keys(\"email\", \"username\", \"bio\", \"image\", \"token\");\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// 3. Test: Ensure user object is not present in negative responses\r",
                  "pm.test(\"No user object in failure responses\", function () {\r",
                  "    if (expected !== \"success\") {\r",
                  "        pm.expect(res).to.not.have.property(\"user\");\r",
                  "    }\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "cbd119ac-d6f6-430f-80a3-b4844f97f0fd"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "login"
            ],
            "host": [
              "conduit-realworld-example-app",
              "fly",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1971c68b-160d-4570-bac8-d03a6bbd21af",
              "system": true
            },
            {
              "key": "Host",
              "value": "conduit-realworld-example-app.fly.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "84",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"user\": {\r\n    \"email\": \"nipuna@gmail.com\",\r\n    \"password\": \"test1234\"\r\n  }\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "0524cc92-236b-40f0-b4f4-0d4b7eeb853e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"f5-b4+EjsTxFS+YfB7IfyBVB2PprPk\""
            },
            {
              "key": "date",
              "value": "Wed, 23 Jul 2025 08:33:12 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "server",
              "value": "Fly/b74a496ea (2025-07-22)"
            },
            {
              "key": "via",
              "value": "1.1 fly.io, 1.1 fly.io"
            },
            {
              "key": "fly-request-id",
              "value": "01K0V6MJSBF2QPF42B01CTXXQP-arn"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              117,
              115,
              101,
              114,
              34,
              58,
              123,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              110,
              105,
              112,
              117,
              110,
              97,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              105,
              112,
              117,
              110,
              97,
              32,
              74,
              97,
              121,
              97,
              119,
              97,
              114,
              100,
              97,
              110,
              97,
              34,
              44,
              34,
              98,
              105,
              111,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              101,
              121,
              74,
              104,
              98,
              71,
              99,
              105,
              79,
              105,
              74,
              73,
              85,
              122,
              73,
              49,
              78,
              105,
              73,
              115,
              73,
              110,
              82,
              53,
              99,
              67,
              73,
              54,
              73,
              107,
              112,
              88,
              86,
              67,
              74,
              57,
              46,
              101,
              121,
              74,
              108,
              98,
              87,
              70,
              112,
              98,
              67,
              73,
              54,
              73,
              109,
              53,
              112,
              99,
              72,
              86,
              117,
              89,
              85,
              66,
              110,
              98,
              87,
              70,
              112,
              98,
              67,
              53,
              106,
              98,
              50,
              48,
              105,
              76,
              67,
              74,
              112,
              89,
              88,
              81,
              105,
              79,
              106,
              69,
              51,
              78,
              84,
              77,
              121,
              78,
              84,
              107,
              49,
              79,
              84,
              74,
              57,
              46,
              111,
              109,
              119,
              117,
              105,
              77,
              117,
              95,
              90,
              77,
              53,
              69,
              103,
              95,
              51,
              68,
              108,
              115,
              68,
              117,
              78,
              69,
              122,
              95,
              117,
              86,
              114,
              83,
              104,
              78,
              51,
              52,
              83,
              104,
              55,
              73,
              57,
              109,
              106,
              55,
              86,
              100,
              89,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 537,
          "responseSize": 245
        },
        "id": "d2c8da91-2113-4276-8124-4e2e739ee63f",
        "assertions": [
          {
            "assertion": "Status and response validation",
            "skipped": false
          },
          {
            "assertion": "Response schema is valid for success",
            "skipped": false
          },
          {
            "assertion": "No user object in failure responses",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "dd2732d1-87ec-41d1-84b8-4994b169137d",
          "length": 5,
          "cycles": 3,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e635c24a-8b0f-4f54-891f-2a29551b90c3"
        },
        "item": {
          "id": "9402a2fc-aebb-4dc6-b0c3-99ab777066b0",
          "name": "GET /user – profile check",
          "request": {
            "url": {
              "path": [
                "user"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "95b08e7d-05db-4cf0-8d82-e843538b0d51",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const res = pm.response.json();\r",
                  "\r",
                  "// 1. Test: Basic status code check\r",
                  "pm.test(\"Get User success - status 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// 2. Test: Schema validation for successful response\r",
                  "pm.test(\"Response has user object with required fields\", () => {\r",
                  "    pm.expect(res).to.have.property(\"user\");\r",
                  "    pm.expect(res.user).to.have.all.keys(\"username\", \"bio\", \"image\", \"token\", \"email\");\r",
                  "});"
                ],
                "_lastExecutionId": "a7c0bf4a-8042-41ba-b6ec-62dc6c488836"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5869ba88-200d-4989-b2d0-998c7eea4345",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a2bfd093-469d-4287-9952-6c4815d5fb49"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "user"
            ],
            "host": [
              "conduit-realworld-example-app",
              "fly",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5pcHVuYUBnbWFpbC5jb20iLCJpYXQiOjE3NTMyNTk1OTJ9.omwuiMu_ZM5Eg_3DlsDuNEz_uVrShN34Sh7I9mj7VdY"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3e75403e-b4c8-4619-bce1-66420a224338",
              "system": true
            },
            {
              "key": "Host",
              "value": "conduit-realworld-example-app.fly.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5630df81-2ac2-4183-93fa-c8cc71026112",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"f5-HwLX0zx4dL5+XnN+qJ6iwIiMPRc\""
            },
            {
              "key": "date",
              "value": "Wed, 23 Jul 2025 08:33:13 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            },
            {
              "key": "server",
              "value": "Fly/b74a496ea (2025-07-22)"
            },
            {
              "key": "via",
              "value": "1.1 fly.io, 1.1 fly.io"
            },
            {
              "key": "fly-request-id",
              "value": "01K0V6MK9MCP223QXFVGPJ8S04-arn"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              117,
              115,
              101,
              114,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              105,
              112,
              117,
              110,
              97,
              32,
              74,
              97,
              121,
              97,
              119,
              97,
              114,
              100,
              97,
              110,
              97,
              34,
              44,
              34,
              98,
              105,
              111,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              101,
              121,
              74,
              104,
              98,
              71,
              99,
              105,
              79,
              105,
              74,
              73,
              85,
              122,
              73,
              49,
              78,
              105,
              73,
              115,
              73,
              110,
              82,
              53,
              99,
              67,
              73,
              54,
              73,
              107,
              112,
              88,
              86,
              67,
              74,
              57,
              46,
              101,
              121,
              74,
              108,
              98,
              87,
              70,
              112,
              98,
              67,
              73,
              54,
              73,
              109,
              53,
              112,
              99,
              72,
              86,
              117,
              89,
              85,
              66,
              110,
              98,
              87,
              70,
              112,
              98,
              67,
              53,
              106,
              98,
              50,
              48,
              105,
              76,
              67,
              74,
              112,
              89,
              88,
              81,
              105,
              79,
              106,
              69,
              51,
              78,
              84,
              77,
              121,
              78,
              84,
              107,
              49,
              79,
              84,
              74,
              57,
              46,
              111,
              109,
              119,
              117,
              105,
              77,
              117,
              95,
              90,
              77,
              53,
              69,
              103,
              95,
              51,
              68,
              108,
              115,
              68,
              117,
              78,
              69,
              122,
              95,
              117,
              86,
              114,
              83,
              104,
              78,
              51,
              52,
              83,
              104,
              55,
              73,
              57,
              109,
              106,
              55,
              86,
              100,
              89,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              110,
              105,
              112,
              117,
              110,
              97,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 390,
          "responseSize": 245
        },
        "id": "9402a2fc-aebb-4dc6-b0c3-99ab777066b0",
        "assertions": [
          {
            "assertion": "Get User success - status 200",
            "skipped": false
          },
          {
            "assertion": "Response has user object with required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2d2fbd5e-8faa-40d5-b925-dd9a47efb084",
          "length": 5,
          "cycles": 3,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ba775974-de3d-4c09-9757-35cf8313fb1a"
        },
        "item": {
          "id": "27be3015-e927-4b60-b8aa-9fb81d2d26cf",
          "name": "POST /articles – Create Article",
          "request": {
            "url": {
              "path": [
                "articles"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"article\": {\r\n    \"title\": \"Title{{random}}\",\r\n    \"description\": \"description\",\r\n    \"body\": \"body\",\r\n    \"tagList\": [\"jaca\", \"testing\"]\r\n  }\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ebb2346e-5657-4105-856a-04091d51b812",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.collectionVariables.set(\"random\", Math.floor(Math.random() * 100000));"
                ],
                "_lastExecutionId": "a275bdf1-b2a6-452d-a11b-afc6fddc959a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "39d82dd9-ae73-495f-957e-f7b620b1b7c9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const res = pm.response.json();\r",
                  "\r",
                  "// 1. Test: status code\r",
                  "pm.test(\"Status code is 201\", () => {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "// 2. Test: Schema validation for successful response\r",
                  "pm.test(\"Article object has all required keys\", () => {\r",
                  "    pm.expect(res).to.have.property(\"article\");\r",
                  "\r",
                  "    // Check keys of article\r",
                  "    pm.expect(res.article).to.have.all.keys(\r",
                  "        \"slug\",\r",
                  "        \"title\",\r",
                  "        \"description\",\r",
                  "        \"body\",\r",
                  "        \"createdAt\",\r",
                  "        \"updatedAt\",\r",
                  "        \"tagList\",\r",
                  "        \"author\",\r",
                  "        \"favorited\",\r",
                  "        \"favoritesCount\"\r",
                  "    );\r",
                  "\r",
                  "    // Check author keys\r",
                  "    pm.expect(res.article.author).to.have.all.keys(\r",
                  "        \"username\",\r",
                  "        \"bio\",\r",
                  "        \"image\",\r",
                  "        \"following\",\r",
                  "        \"followersCount\"\r",
                  "    );\r",
                  "\r",
                  "    // Save slug for use in update/delete requests\r",
                  "    pm.environment.set(\"slug\", res.article.slug);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "c085524b-64f8-4a57-9e3d-69a273fe9100"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "conduit-realworld-example-app",
              "fly",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5pcHVuYUBnbWFpbC5jb20iLCJpYXQiOjE3NTMyNTk1OTJ9.omwuiMu_ZM5Eg_3DlsDuNEz_uVrShN34Sh7I9mj7VdY"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4727bf83-0ce9-47ba-b897-d7d33c333aef",
              "system": true
            },
            {
              "key": "Host",
              "value": "conduit-realworld-example-app.fly.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "147",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"article\": {\r\n    \"title\": \"Title10890\",\r\n    \"description\": \"description\",\r\n    \"body\": \"body\",\r\n    \"tagList\": [\"jaca\", \"testing\"]\r\n  }\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "074723bd-a752-415a-b86c-a6b4d0432359",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"158-iaQO5uMYj8a3v9BG+wTmgr1MhBM\""
            },
            {
              "key": "date",
              "value": "Wed, 23 Jul 2025 08:33:13 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            },
            {
              "key": "server",
              "value": "Fly/b74a496ea (2025-07-22)"
            },
            {
              "key": "via",
              "value": "1.1 fly.io, 1.1 fly.io"
            },
            {
              "key": "fly-request-id",
              "value": "01K0V6MKR4R69G6AJV4TAGA1AS-arn"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              58,
              123,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              105,
              116,
              108,
              101,
              49,
              48,
              56,
              57,
              48,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              105,
              116,
              108,
              101,
              49,
              48,
              56,
              57,
              48,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              98,
              111,
              100,
              121,
              34,
              58,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              51,
              84,
              48,
              56,
              58,
              51,
              51,
              58,
              49,
              51,
              46,
              53,
              53,
              57,
              90,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              51,
              84,
              48,
              56,
              58,
              51,
              51,
              58,
              49,
              51,
              46,
              53,
              53,
              51,
              90,
              34,
              44,
              34,
              116,
              97,
              103,
              76,
              105,
              115,
              116,
              34,
              58,
              91,
              34,
              106,
              97,
              99,
              97,
              34,
              44,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              97,
              117,
              116,
              104,
              111,
              114,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              105,
              112,
              117,
              110,
              97,
              32,
              74,
              97,
              121,
              97,
              119,
              97,
              114,
              100,
              97,
              110,
              97,
              34,
              44,
              34,
              98,
              105,
              111,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              102,
              111,
              108,
              108,
              111,
              119,
              101,
              114,
              115,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              125,
              44,
              34,
              102,
              97,
              118,
              111,
              114,
              105,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              102,
              97,
              118,
              111,
              114,
              105,
              116,
              101,
              115,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 228,
          "responseSize": 344
        },
        "id": "27be3015-e927-4b60-b8aa-9fb81d2d26cf",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false
          },
          {
            "assertion": "Article object has all required keys",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "515f32fd-40e7-40a4-896d-2724c24f7696",
          "length": 5,
          "cycles": 3,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9c59eb48-3356-4de4-8ff6-b540ca35979a"
        },
        "item": {
          "id": "1bec81c6-64e3-48ee-bcb6-c8a00ae7ef53",
          "name": "PUT /articles/:slug – Update Article",
          "request": {
            "url": {
              "path": [
                "articles",
                "{{slug}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"article\": {\r\n    \"title\": \"{{slug}} - updated\",\r\n    \"description\": \"updated description\",\r\n    \"body\": \"updated body\",\r\n    \"tagList\": [\"jaca\", \"testing\"]\r\n  }\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc07c821-f900-475a-81cf-7003e15644cd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test 1: Status code is 200\r",
                  "pm.test(\"Status code is 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test 2: Schema validation for successful response and updated field validation\r",
                  "pm.test(\"Article Updated: keys and updated fields\", () => {\r",
                  "    const res = pm.response.json();\r",
                  "\r",
                  "    // Check article keys\r",
                  "    pm.expect(res).to.have.property(\"article\");\r",
                  "    pm.expect(res.article).to.have.all.keys(\r",
                  "        \"slug\",\r",
                  "        \"title\",\r",
                  "        \"description\",\r",
                  "        \"body\",\r",
                  "        \"createdAt\",\r",
                  "        \"updatedAt\",\r",
                  "        \"tagList\",\r",
                  "        \"author\",\r",
                  "        \"favorited\",\r",
                  "        \"favoritesCount\"\r",
                  "    );\r",
                  "\r",
                  "    // Check updated values\r",
                  "    pm.expect(res.article.title).to.include(\"updated\");\r",
                  "    pm.expect(res.article.description).to.eql(\"updated description\");\r",
                  "    pm.expect(res.article.body).to.eql(\"updated body\");\r",
                  "    pm.expect(res.article.tagList).to.include(\"jaca\");\r",
                  "\r",
                  "    // Save updated slug\r",
                  "    pm.environment.set(\"slug\", res.article.slug);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "70fa1f23-f1e4-4938-96c2-66f5088abcb7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "articles",
              "title10890"
            ],
            "host": [
              "conduit-realworld-example-app",
              "fly",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5pcHVuYUBnbWFpbC5jb20iLCJpYXQiOjE3NTMyNTk1OTJ9.omwuiMu_ZM5Eg_3DlsDuNEz_uVrShN34Sh7I9mj7VdY"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9511c3e9-e7e3-4324-9349-d7fe79c9081b",
              "system": true
            },
            {
              "key": "Host",
              "value": "conduit-realworld-example-app.fly.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "173",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"article\": {\r\n    \"title\": \"title10890 - updated\",\r\n    \"description\": \"updated description\",\r\n    \"body\": \"updated body\",\r\n    \"tagList\": [\"jaca\", \"testing\"]\r\n  }\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "d2b00d98-8966-4f82-b290-c84ba2cc58e9",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"17c-YujgjP5bnCMK16b8Y+KFKrtEnEg\""
            },
            {
              "key": "date",
              "value": "Wed, 23 Jul 2025 08:33:14 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            },
            {
              "key": "server",
              "value": "Fly/b74a496ea (2025-07-22)"
            },
            {
              "key": "via",
              "value": "1.1 fly.io, 1.1 fly.io"
            },
            {
              "key": "fly-request-id",
              "value": "01K0V6MM2JG8BEMDQ8GMKGFP63-arn"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              58,
              123,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              105,
              116,
              108,
              101,
              49,
              48,
              56,
              57,
              48,
              45,
              45,
              45,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              116,
              105,
              116,
              108,
              101,
              49,
              48,
              56,
              57,
              48,
              32,
              45,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              98,
              111,
              100,
              121,
              34,
              58,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              32,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              51,
              84,
              48,
              56,
              58,
              51,
              51,
              58,
              49,
              51,
              46,
              53,
              53,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              51,
              84,
              48,
              56,
              58,
              51,
              51,
              58,
              49,
              52,
              46,
              48,
              50,
              50,
              90,
              34,
              44,
              34,
              116,
              97,
              103,
              76,
              105,
              115,
              116,
              34,
              58,
              91,
              34,
              106,
              97,
              99,
              97,
              34,
              44,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              97,
              117,
              116,
              104,
              111,
              114,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              105,
              112,
              117,
              110,
              97,
              32,
              74,
              97,
              121,
              97,
              119,
              97,
              114,
              100,
              97,
              110,
              97,
              34,
              44,
              34,
              98,
              105,
              111,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              102,
              111,
              108,
              108,
              111,
              119,
              101,
              114,
              115,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              125,
              44,
              34,
              102,
              97,
              118,
              111,
              114,
              105,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              102,
              97,
              118,
              111,
              114,
              105,
              116,
              101,
              115,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 425,
          "responseSize": 380
        },
        "id": "1bec81c6-64e3-48ee-bcb6-c8a00ae7ef53",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Article Updated: keys and updated fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c346281b-f413-47be-815f-4752fac6c8da",
          "length": 5,
          "cycles": 3,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e6799e8e-08bf-490d-aaf4-3f99b32eefc7"
        },
        "item": {
          "id": "d7c7feb0-18cf-4298-98f1-25e77e3da134",
          "name": "DELETE /articles/:slug – Delete Article",
          "request": {
            "url": {
              "path": [
                "articles",
                "{{slug}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "16d7599c-ddbf-41fa-920e-e6cf17d41aa1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test 1: Status code is 200\r",
                  "pm.test(\"Status code is 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test 2: Schema validation for successful response and article Deleted message validation\r",
                  "pm.test(\"Article Deleted message is correct\", () => {\r",
                  "    const res = pm.response.json();\r",
                  "\r",
                  "    pm.expect(res).to.have.property(\"message\");\r",
                  "    pm.expect(res.message).to.have.property(\"body\").that.is.an(\"array\");\r",
                  "    pm.expect(res.message.body[0]).to.include(\"Article deleted successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "0ec096d8-4d6d-4542-a658-c5432cf9671c"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6058fb91-b4df-4f34-835a-7ebc14bc60ad",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "2b504d42-22be-4dc0-9905-216139cc2d46"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "articles",
              "title10890---updated"
            ],
            "host": [
              "conduit-realworld-example-app",
              "fly",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5pcHVuYUBnbWFpbC5jb20iLCJpYXQiOjE3NTMyNTk1OTJ9.omwuiMu_ZM5Eg_3DlsDuNEz_uVrShN34Sh7I9mj7VdY"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fd1deaf5-20c2-49d2-8169-b08708f28f92",
              "system": true
            },
            {
              "key": "Host",
              "value": "conduit-realworld-example-app.fly.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "d67fb142-85f5-46bb-93b7-d1b7029febcb",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"35-pGKoxX2y9ZLvz/mIoVg8bPXXgts\""
            },
            {
              "key": "date",
              "value": "Wed, 23 Jul 2025 08:33:14 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "server",
              "value": "Fly/b74a496ea (2025-07-22)"
            },
            {
              "key": "via",
              "value": "1.1 fly.io, 1.1 fly.io"
            },
            {
              "key": "fly-request-id",
              "value": "01K0V6MMHYMV8Y2PS785RV5S11-arn"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              123,
              34,
              98,
              111,
              100,
              121,
              34,
              58,
              91,
              34,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              93,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 184,
          "responseSize": 53
        },
        "id": "d7c7feb0-18cf-4298-98f1-25e77e3da134",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Article Deleted message is correct",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "654b371e-b424-4c24-8907-f2c73466bc4c",
          "length": 5,
          "cycles": 3,
          "position": 0,
          "iteration": 1,
          "cr": true,
          "httpRequestId": "a76e4bfa-05c5-41e0-9f2b-bafce0adb912"
        },
        "item": {
          "id": "d2c8da91-2113-4276-8124-4e2e739ee63f",
          "name": "Login Test",
          "request": {
            "url": {
              "path": [
                "users",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"user\": {\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n  }\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aa07e89e-e834-46d0-b37e-7bb20b9f8be5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const res = pm.response.json();\r",
                  "const expected = pm.iterationData.get(\"expected\");\r",
                  "const email = pm.iterationData.get(\"email\");\r",
                  "const username = pm.iterationData.get(\"username\");\r",
                  "\r",
                  "// 1. Test: Basic status code check\r",
                  "pm.test(\"Status and response validation\", function () {\r",
                  "    if (expected === \"success\") {\r",
                  "        pm.response.to.have.status(200);\r",
                  "        pm.expect(res.user.email, \"Returned email does not match test data\").to.eql(email);\r",
                  "        pm.expect(res.user.username, \"Returned username does not match test data\").to.eql(username);\r",
                  "        pm.environment.set(\"token\", res.user.token);\r",
                  "        \r",
                  "    } else if (expected === \"wrong_credentials\") {\r",
                  "        pm.response.to.have.status(422);\r",
                  "        pm.expect(res.errors.body[0]).to.include(\"Wrong email/password\");\r",
                  "    } else if (expected === \"user_not_found\") {\r",
                  "        pm.response.to.have.status(404);\r",
                  "        pm.expect(res.errors.body[0]).to.include(\"Email not found\");\r",
                  "    } \r",
                  "});\r",
                  "\r",
                  "// 2. Test: Schema validation for successful response\r",
                  "pm.test(\"Response schema is valid for success\", function () {\r",
                  "    if (expected === \"success\") {\r",
                  "        pm.expect(res).to.have.property(\"user\");\r",
                  "        pm.expect(res.user).to.have.all.keys(\"email\", \"username\", \"bio\", \"image\", \"token\");\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// 3. Test: Ensure user object is not present in negative responses\r",
                  "pm.test(\"No user object in failure responses\", function () {\r",
                  "    if (expected !== \"success\") {\r",
                  "        pm.expect(res).to.not.have.property(\"user\");\r",
                  "    }\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "cbd119ac-d6f6-430f-80a3-b4844f97f0fd"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "login"
            ],
            "host": [
              "conduit-realworld-example-app",
              "fly",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6c6ac2b2-d8a2-43c6-a383-2ab5343dc568",
              "system": true
            },
            {
              "key": "Host",
              "value": "conduit-realworld-example-app.fly.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "85",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"user\": {\r\n    \"email\": \"nipuna@gmail.com\",\r\n    \"password\": \"wrongpass\"\r\n  }\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "c3a7e4e3-1faa-4762-a82f-b21b1f168654",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"38-AVpkyMWxvFrSL62SyBFP0jmeqf8\""
            },
            {
              "key": "date",
              "value": "Wed, 23 Jul 2025 08:33:14 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            },
            {
              "key": "server",
              "value": "Fly/b74a496ea (2025-07-22)"
            },
            {
              "key": "via",
              "value": "1.1 fly.io, 1.1 fly.io"
            },
            {
              "key": "fly-request-id",
              "value": "01K0V6MMT7SVMQQMG3GFVH2Y07-arn"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              115,
              34,
              58,
              123,
              34,
              98,
              111,
              100,
              121,
              34,
              58,
              91,
              34,
              87,
              114,
              111,
              110,
              103,
              32,
              101,
              109,
              97,
              105,
              108,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              111,
              109,
              98,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              93,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 363,
          "responseSize": 56
        },
        "id": "d2c8da91-2113-4276-8124-4e2e739ee63f",
        "assertions": [
          {
            "assertion": "Status and response validation",
            "skipped": false
          },
          {
            "assertion": "Response schema is valid for success",
            "skipped": false
          },
          {
            "assertion": "No user object in failure responses",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0a69b947-c30b-427e-b1da-d7b0ec81939e",
          "length": 5,
          "cycles": 3,
          "position": 1,
          "iteration": 1,
          "httpRequestId": "bb46efc3-2b75-47de-ba9a-9d5ca168f46d"
        },
        "item": {
          "id": "9402a2fc-aebb-4dc6-b0c3-99ab777066b0",
          "name": "GET /user – profile check",
          "request": {
            "url": {
              "path": [
                "user"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "95b08e7d-05db-4cf0-8d82-e843538b0d51",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const res = pm.response.json();\r",
                  "\r",
                  "// 1. Test: Basic status code check\r",
                  "pm.test(\"Get User success - status 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// 2. Test: Schema validation for successful response\r",
                  "pm.test(\"Response has user object with required fields\", () => {\r",
                  "    pm.expect(res).to.have.property(\"user\");\r",
                  "    pm.expect(res.user).to.have.all.keys(\"username\", \"bio\", \"image\", \"token\", \"email\");\r",
                  "});"
                ],
                "_lastExecutionId": "a7c0bf4a-8042-41ba-b6ec-62dc6c488836"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5869ba88-200d-4989-b2d0-998c7eea4345",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a2bfd093-469d-4287-9952-6c4815d5fb49"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "user"
            ],
            "host": [
              "conduit-realworld-example-app",
              "fly",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5pcHVuYUBnbWFpbC5jb20iLCJpYXQiOjE3NTMyNTk1OTJ9.omwuiMu_ZM5Eg_3DlsDuNEz_uVrShN34Sh7I9mj7VdY"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f310c0dd-7198-43ca-9994-e21fc6b215f4",
              "system": true
            },
            {
              "key": "Host",
              "value": "conduit-realworld-example-app.fly.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "583b6306-16c3-4334-9812-485d76a28db0",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"f5-HwLX0zx4dL5+XnN+qJ6iwIiMPRc\""
            },
            {
              "key": "date",
              "value": "Wed, 23 Jul 2025 08:33:15 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "server",
              "value": "Fly/b74a496ea (2025-07-22)"
            },
            {
              "key": "via",
              "value": "1.1 fly.io, 1.1 fly.io"
            },
            {
              "key": "fly-request-id",
              "value": "01K0V6MN82X5BH307HB1M0NHY1-arn"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              117,
              115,
              101,
              114,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              105,
              112,
              117,
              110,
              97,
              32,
              74,
              97,
              121,
              97,
              119,
              97,
              114,
              100,
              97,
              110,
              97,
              34,
              44,
              34,
              98,
              105,
              111,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              101,
              121,
              74,
              104,
              98,
              71,
              99,
              105,
              79,
              105,
              74,
              73,
              85,
              122,
              73,
              49,
              78,
              105,
              73,
              115,
              73,
              110,
              82,
              53,
              99,
              67,
              73,
              54,
              73,
              107,
              112,
              88,
              86,
              67,
              74,
              57,
              46,
              101,
              121,
              74,
              108,
              98,
              87,
              70,
              112,
              98,
              67,
              73,
              54,
              73,
              109,
              53,
              112,
              99,
              72,
              86,
              117,
              89,
              85,
              66,
              110,
              98,
              87,
              70,
              112,
              98,
              67,
              53,
              106,
              98,
              50,
              48,
              105,
              76,
              67,
              74,
              112,
              89,
              88,
              81,
              105,
              79,
              106,
              69,
              51,
              78,
              84,
              77,
              121,
              78,
              84,
              107,
              49,
              79,
              84,
              74,
              57,
              46,
              111,
              109,
              119,
              117,
              105,
              77,
              117,
              95,
              90,
              77,
              53,
              69,
              103,
              95,
              51,
              68,
              108,
              115,
              68,
              117,
              78,
              69,
              122,
              95,
              117,
              86,
              114,
              83,
              104,
              78,
              51,
              52,
              83,
              104,
              55,
              73,
              57,
              109,
              106,
              55,
              86,
              100,
              89,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              110,
              105,
              112,
              117,
              110,
              97,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 227,
          "responseSize": 245
        },
        "id": "9402a2fc-aebb-4dc6-b0c3-99ab777066b0",
        "assertions": [
          {
            "assertion": "Get User success - status 200",
            "skipped": false
          },
          {
            "assertion": "Response has user object with required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ff7c1b57-8297-41ef-a20e-0b5b77fb54b3",
          "length": 5,
          "cycles": 3,
          "position": 2,
          "iteration": 1,
          "httpRequestId": "6d4ab708-2768-4efd-8555-559f59102c1c"
        },
        "item": {
          "id": "27be3015-e927-4b60-b8aa-9fb81d2d26cf",
          "name": "POST /articles – Create Article",
          "request": {
            "url": {
              "path": [
                "articles"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"article\": {\r\n    \"title\": \"Title{{random}}\",\r\n    \"description\": \"description\",\r\n    \"body\": \"body\",\r\n    \"tagList\": [\"jaca\", \"testing\"]\r\n  }\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ebb2346e-5657-4105-856a-04091d51b812",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.collectionVariables.set(\"random\", Math.floor(Math.random() * 100000));"
                ],
                "_lastExecutionId": "a275bdf1-b2a6-452d-a11b-afc6fddc959a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "39d82dd9-ae73-495f-957e-f7b620b1b7c9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const res = pm.response.json();\r",
                  "\r",
                  "// 1. Test: status code\r",
                  "pm.test(\"Status code is 201\", () => {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "// 2. Test: Schema validation for successful response\r",
                  "pm.test(\"Article object has all required keys\", () => {\r",
                  "    pm.expect(res).to.have.property(\"article\");\r",
                  "\r",
                  "    // Check keys of article\r",
                  "    pm.expect(res.article).to.have.all.keys(\r",
                  "        \"slug\",\r",
                  "        \"title\",\r",
                  "        \"description\",\r",
                  "        \"body\",\r",
                  "        \"createdAt\",\r",
                  "        \"updatedAt\",\r",
                  "        \"tagList\",\r",
                  "        \"author\",\r",
                  "        \"favorited\",\r",
                  "        \"favoritesCount\"\r",
                  "    );\r",
                  "\r",
                  "    // Check author keys\r",
                  "    pm.expect(res.article.author).to.have.all.keys(\r",
                  "        \"username\",\r",
                  "        \"bio\",\r",
                  "        \"image\",\r",
                  "        \"following\",\r",
                  "        \"followersCount\"\r",
                  "    );\r",
                  "\r",
                  "    // Save slug for use in update/delete requests\r",
                  "    pm.environment.set(\"slug\", res.article.slug);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "c085524b-64f8-4a57-9e3d-69a273fe9100"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "conduit-realworld-example-app",
              "fly",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5pcHVuYUBnbWFpbC5jb20iLCJpYXQiOjE3NTMyNTk1OTJ9.omwuiMu_ZM5Eg_3DlsDuNEz_uVrShN34Sh7I9mj7VdY"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7fba11e5-bce1-44ce-975d-55577673abf2",
              "system": true
            },
            {
              "key": "Host",
              "value": "conduit-realworld-example-app.fly.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "147",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"article\": {\r\n    \"title\": \"Title19352\",\r\n    \"description\": \"description\",\r\n    \"body\": \"body\",\r\n    \"tagList\": [\"jaca\", \"testing\"]\r\n  }\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "de233902-22e6-457c-906d-3ca41382bc79",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"158-JYbFcrM7M/Ppv/I6Zrfj11U2K2k\""
            },
            {
              "key": "date",
              "value": "Wed, 23 Jul 2025 08:33:15 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "server",
              "value": "Fly/b74a496ea (2025-07-22)"
            },
            {
              "key": "via",
              "value": "1.1 fly.io, 1.1 fly.io"
            },
            {
              "key": "fly-request-id",
              "value": "01K0V6MNHDMZAC49KP1FTCD1CF-arn"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              58,
              123,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              105,
              116,
              108,
              101,
              49,
              57,
              51,
              53,
              50,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              105,
              116,
              108,
              101,
              49,
              57,
              51,
              53,
              50,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              98,
              111,
              100,
              121,
              34,
              58,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              51,
              84,
              48,
              56,
              58,
              51,
              51,
              58,
              49,
              53,
              46,
              51,
              56,
              54,
              90,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              51,
              84,
              48,
              56,
              58,
              51,
              51,
              58,
              49,
              53,
              46,
              51,
              56,
              48,
              90,
              34,
              44,
              34,
              116,
              97,
              103,
              76,
              105,
              115,
              116,
              34,
              58,
              91,
              34,
              106,
              97,
              99,
              97,
              34,
              44,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              97,
              117,
              116,
              104,
              111,
              114,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              105,
              112,
              117,
              110,
              97,
              32,
              74,
              97,
              121,
              97,
              119,
              97,
              114,
              100,
              97,
              110,
              97,
              34,
              44,
              34,
              98,
              105,
              111,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              102,
              111,
              108,
              108,
              111,
              119,
              101,
              114,
              115,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              125,
              44,
              34,
              102,
              97,
              118,
              111,
              114,
              105,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              102,
              97,
              118,
              111,
              114,
              105,
              116,
              101,
              115,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 234,
          "responseSize": 344
        },
        "id": "27be3015-e927-4b60-b8aa-9fb81d2d26cf",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false
          },
          {
            "assertion": "Article object has all required keys",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "225fe4c9-74cb-41fd-8f5a-80f0e3c6376c",
          "length": 5,
          "cycles": 3,
          "position": 3,
          "iteration": 1,
          "httpRequestId": "3da8cb44-f90c-4a3f-b34e-5dd86cf103a8"
        },
        "item": {
          "id": "1bec81c6-64e3-48ee-bcb6-c8a00ae7ef53",
          "name": "PUT /articles/:slug – Update Article",
          "request": {
            "url": {
              "path": [
                "articles",
                "{{slug}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"article\": {\r\n    \"title\": \"{{slug}} - updated\",\r\n    \"description\": \"updated description\",\r\n    \"body\": \"updated body\",\r\n    \"tagList\": [\"jaca\", \"testing\"]\r\n  }\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc07c821-f900-475a-81cf-7003e15644cd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test 1: Status code is 200\r",
                  "pm.test(\"Status code is 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test 2: Schema validation for successful response and updated field validation\r",
                  "pm.test(\"Article Updated: keys and updated fields\", () => {\r",
                  "    const res = pm.response.json();\r",
                  "\r",
                  "    // Check article keys\r",
                  "    pm.expect(res).to.have.property(\"article\");\r",
                  "    pm.expect(res.article).to.have.all.keys(\r",
                  "        \"slug\",\r",
                  "        \"title\",\r",
                  "        \"description\",\r",
                  "        \"body\",\r",
                  "        \"createdAt\",\r",
                  "        \"updatedAt\",\r",
                  "        \"tagList\",\r",
                  "        \"author\",\r",
                  "        \"favorited\",\r",
                  "        \"favoritesCount\"\r",
                  "    );\r",
                  "\r",
                  "    // Check updated values\r",
                  "    pm.expect(res.article.title).to.include(\"updated\");\r",
                  "    pm.expect(res.article.description).to.eql(\"updated description\");\r",
                  "    pm.expect(res.article.body).to.eql(\"updated body\");\r",
                  "    pm.expect(res.article.tagList).to.include(\"jaca\");\r",
                  "\r",
                  "    // Save updated slug\r",
                  "    pm.environment.set(\"slug\", res.article.slug);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "70fa1f23-f1e4-4938-96c2-66f5088abcb7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "articles",
              "title19352"
            ],
            "host": [
              "conduit-realworld-example-app",
              "fly",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5pcHVuYUBnbWFpbC5jb20iLCJpYXQiOjE3NTMyNTk1OTJ9.omwuiMu_ZM5Eg_3DlsDuNEz_uVrShN34Sh7I9mj7VdY"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "48a74394-7b78-43d7-b293-efc97f5feb66",
              "system": true
            },
            {
              "key": "Host",
              "value": "conduit-realworld-example-app.fly.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "173",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"article\": {\r\n    \"title\": \"title19352 - updated\",\r\n    \"description\": \"updated description\",\r\n    \"body\": \"updated body\",\r\n    \"tagList\": [\"jaca\", \"testing\"]\r\n  }\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "cc76e92d-5dbb-4974-a5e4-311966785c3d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"17c-u8roEfWIhGVFqKFIW/2t946c+uA\""
            },
            {
              "key": "date",
              "value": "Wed, 23 Jul 2025 08:33:15 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "server",
              "value": "Fly/b74a496ea (2025-07-22)"
            },
            {
              "key": "via",
              "value": "1.1 fly.io, 1.1 fly.io"
            },
            {
              "key": "fly-request-id",
              "value": "01K0V6MNTH7RR51E55BT7ETPNP-arn"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              58,
              123,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              105,
              116,
              108,
              101,
              49,
              57,
              51,
              53,
              50,
              45,
              45,
              45,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              116,
              105,
              116,
              108,
              101,
              49,
              57,
              51,
              53,
              50,
              32,
              45,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              98,
              111,
              100,
              121,
              34,
              58,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              32,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              51,
              84,
              48,
              56,
              58,
              51,
              51,
              58,
              49,
              53,
              46,
              51,
              56,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              51,
              84,
              48,
              56,
              58,
              51,
              51,
              58,
              49,
              53,
              46,
              54,
              55,
              50,
              90,
              34,
              44,
              34,
              116,
              97,
              103,
              76,
              105,
              115,
              116,
              34,
              58,
              91,
              34,
              106,
              97,
              99,
              97,
              34,
              44,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              97,
              117,
              116,
              104,
              111,
              114,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              105,
              112,
              117,
              110,
              97,
              32,
              74,
              97,
              121,
              97,
              119,
              97,
              114,
              100,
              97,
              110,
              97,
              34,
              44,
              34,
              98,
              105,
              111,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              102,
              111,
              108,
              108,
              111,
              119,
              101,
              114,
              115,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              125,
              44,
              34,
              102,
              97,
              118,
              111,
              114,
              105,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              102,
              97,
              118,
              111,
              114,
              105,
              116,
              101,
              115,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 255,
          "responseSize": 380
        },
        "id": "1bec81c6-64e3-48ee-bcb6-c8a00ae7ef53",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Article Updated: keys and updated fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "be042418-d473-4625-8a93-8e08e31db1c3",
          "length": 5,
          "cycles": 3,
          "position": 4,
          "iteration": 1,
          "httpRequestId": "b2250663-136b-4eca-943b-5677955f745c"
        },
        "item": {
          "id": "d7c7feb0-18cf-4298-98f1-25e77e3da134",
          "name": "DELETE /articles/:slug – Delete Article",
          "request": {
            "url": {
              "path": [
                "articles",
                "{{slug}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "16d7599c-ddbf-41fa-920e-e6cf17d41aa1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test 1: Status code is 200\r",
                  "pm.test(\"Status code is 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test 2: Schema validation for successful response and article Deleted message validation\r",
                  "pm.test(\"Article Deleted message is correct\", () => {\r",
                  "    const res = pm.response.json();\r",
                  "\r",
                  "    pm.expect(res).to.have.property(\"message\");\r",
                  "    pm.expect(res.message).to.have.property(\"body\").that.is.an(\"array\");\r",
                  "    pm.expect(res.message.body[0]).to.include(\"Article deleted successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "0ec096d8-4d6d-4542-a658-c5432cf9671c"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6058fb91-b4df-4f34-835a-7ebc14bc60ad",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "2b504d42-22be-4dc0-9905-216139cc2d46"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "articles",
              "title19352---updated"
            ],
            "host": [
              "conduit-realworld-example-app",
              "fly",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5pcHVuYUBnbWFpbC5jb20iLCJpYXQiOjE3NTMyNTk1OTJ9.omwuiMu_ZM5Eg_3DlsDuNEz_uVrShN34Sh7I9mj7VdY"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7fd85d7f-7f49-4cc6-83ee-77fe16d891fd",
              "system": true
            },
            {
              "key": "Host",
              "value": "conduit-realworld-example-app.fly.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "e8d2a827-b9d8-436c-b53b-0e774e58389b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"35-pGKoxX2y9ZLvz/mIoVg8bPXXgts\""
            },
            {
              "key": "date",
              "value": "Wed, 23 Jul 2025 08:33:16 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "server",
              "value": "Fly/b74a496ea (2025-07-22)"
            },
            {
              "key": "via",
              "value": "1.1 fly.io, 1.1 fly.io"
            },
            {
              "key": "fly-request-id",
              "value": "01K0V6MP4R743AKD6YV5RAJGKZ-arn"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              123,
              34,
              98,
              111,
              100,
              121,
              34,
              58,
              91,
              34,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              93,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 230,
          "responseSize": 53
        },
        "id": "d7c7feb0-18cf-4298-98f1-25e77e3da134",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Article Deleted message is correct",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "265969f6-0f25-4f37-b315-18f86f7092a5",
          "length": 5,
          "cycles": 3,
          "position": 0,
          "iteration": 2,
          "cr": true,
          "httpRequestId": "0f403d4f-1431-427e-8837-131ddafbaa2a"
        },
        "item": {
          "id": "d2c8da91-2113-4276-8124-4e2e739ee63f",
          "name": "Login Test",
          "request": {
            "url": {
              "path": [
                "users",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"user\": {\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n  }\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aa07e89e-e834-46d0-b37e-7bb20b9f8be5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const res = pm.response.json();\r",
                  "const expected = pm.iterationData.get(\"expected\");\r",
                  "const email = pm.iterationData.get(\"email\");\r",
                  "const username = pm.iterationData.get(\"username\");\r",
                  "\r",
                  "// 1. Test: Basic status code check\r",
                  "pm.test(\"Status and response validation\", function () {\r",
                  "    if (expected === \"success\") {\r",
                  "        pm.response.to.have.status(200);\r",
                  "        pm.expect(res.user.email, \"Returned email does not match test data\").to.eql(email);\r",
                  "        pm.expect(res.user.username, \"Returned username does not match test data\").to.eql(username);\r",
                  "        pm.environment.set(\"token\", res.user.token);\r",
                  "        \r",
                  "    } else if (expected === \"wrong_credentials\") {\r",
                  "        pm.response.to.have.status(422);\r",
                  "        pm.expect(res.errors.body[0]).to.include(\"Wrong email/password\");\r",
                  "    } else if (expected === \"user_not_found\") {\r",
                  "        pm.response.to.have.status(404);\r",
                  "        pm.expect(res.errors.body[0]).to.include(\"Email not found\");\r",
                  "    } \r",
                  "});\r",
                  "\r",
                  "// 2. Test: Schema validation for successful response\r",
                  "pm.test(\"Response schema is valid for success\", function () {\r",
                  "    if (expected === \"success\") {\r",
                  "        pm.expect(res).to.have.property(\"user\");\r",
                  "        pm.expect(res.user).to.have.all.keys(\"email\", \"username\", \"bio\", \"image\", \"token\");\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// 3. Test: Ensure user object is not present in negative responses\r",
                  "pm.test(\"No user object in failure responses\", function () {\r",
                  "    if (expected !== \"success\") {\r",
                  "        pm.expect(res).to.not.have.property(\"user\");\r",
                  "    }\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "cbd119ac-d6f6-430f-80a3-b4844f97f0fd"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "login"
            ],
            "host": [
              "conduit-realworld-example-app",
              "fly",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cbb51caf-bf02-4eed-99de-b0aff01e9e8e",
              "system": true
            },
            {
              "key": "Host",
              "value": "conduit-realworld-example-app.fly.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "86",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"user\": {\r\n    \"email\": \"invalid@email.com\",\r\n    \"password\": \"wrongpass\"\r\n  }\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "9917e567-9db2-4e82-bddd-4f1436801570",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"35-6MTqo5WH5ufStoT/4MjnNw84C/0\""
            },
            {
              "key": "date",
              "value": "Wed, 23 Jul 2025 08:33:16 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "server",
              "value": "Fly/b74a496ea (2025-07-22)"
            },
            {
              "key": "via",
              "value": "1.1 fly.io, 1.1 fly.io"
            },
            {
              "key": "fly-request-id",
              "value": "01K0V6MPE2KCKNCJTKR9A3X9P5-arn"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              115,
              34,
              58,
              123,
              34,
              98,
              111,
              100,
              121,
              34,
              58,
              91,
              34,
              69,
              109,
              97,
              105,
              108,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              32,
              115,
              105,
              103,
              110,
              32,
              105,
              110,
              32,
              102,
              105,
              114,
              115,
              116,
              34,
              93,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 240,
          "responseSize": 53
        },
        "id": "d2c8da91-2113-4276-8124-4e2e739ee63f",
        "assertions": [
          {
            "assertion": "Status and response validation",
            "skipped": false
          },
          {
            "assertion": "Response schema is valid for success",
            "skipped": false
          },
          {
            "assertion": "No user object in failure responses",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "cdebda10-0643-475e-aa20-71b8a90cb451",
          "length": 5,
          "cycles": 3,
          "position": 1,
          "iteration": 2,
          "httpRequestId": "50615375-6c33-4fc5-a92f-331fc5e7b295"
        },
        "item": {
          "id": "9402a2fc-aebb-4dc6-b0c3-99ab777066b0",
          "name": "GET /user – profile check",
          "request": {
            "url": {
              "path": [
                "user"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "95b08e7d-05db-4cf0-8d82-e843538b0d51",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const res = pm.response.json();\r",
                  "\r",
                  "// 1. Test: Basic status code check\r",
                  "pm.test(\"Get User success - status 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// 2. Test: Schema validation for successful response\r",
                  "pm.test(\"Response has user object with required fields\", () => {\r",
                  "    pm.expect(res).to.have.property(\"user\");\r",
                  "    pm.expect(res.user).to.have.all.keys(\"username\", \"bio\", \"image\", \"token\", \"email\");\r",
                  "});"
                ],
                "_lastExecutionId": "a7c0bf4a-8042-41ba-b6ec-62dc6c488836"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5869ba88-200d-4989-b2d0-998c7eea4345",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a2bfd093-469d-4287-9952-6c4815d5fb49"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "user"
            ],
            "host": [
              "conduit-realworld-example-app",
              "fly",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5pcHVuYUBnbWFpbC5jb20iLCJpYXQiOjE3NTMyNTk1OTJ9.omwuiMu_ZM5Eg_3DlsDuNEz_uVrShN34Sh7I9mj7VdY"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "accd2bd3-25e4-4752-a025-756aac77bef5",
              "system": true
            },
            {
              "key": "Host",
              "value": "conduit-realworld-example-app.fly.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3766e4cc-ed84-4a05-818f-dfc8f7260ee5",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"f5-HwLX0zx4dL5+XnN+qJ6iwIiMPRc\""
            },
            {
              "key": "date",
              "value": "Wed, 23 Jul 2025 08:33:16 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "server",
              "value": "Fly/b74a496ea (2025-07-22)"
            },
            {
              "key": "via",
              "value": "1.1 fly.io, 1.1 fly.io"
            },
            {
              "key": "fly-request-id",
              "value": "01K0V6MPRR38R6DZRAEFEF1PXJ-arn"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              117,
              115,
              101,
              114,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              105,
              112,
              117,
              110,
              97,
              32,
              74,
              97,
              121,
              97,
              119,
              97,
              114,
              100,
              97,
              110,
              97,
              34,
              44,
              34,
              98,
              105,
              111,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              101,
              121,
              74,
              104,
              98,
              71,
              99,
              105,
              79,
              105,
              74,
              73,
              85,
              122,
              73,
              49,
              78,
              105,
              73,
              115,
              73,
              110,
              82,
              53,
              99,
              67,
              73,
              54,
              73,
              107,
              112,
              88,
              86,
              67,
              74,
              57,
              46,
              101,
              121,
              74,
              108,
              98,
              87,
              70,
              112,
              98,
              67,
              73,
              54,
              73,
              109,
              53,
              112,
              99,
              72,
              86,
              117,
              89,
              85,
              66,
              110,
              98,
              87,
              70,
              112,
              98,
              67,
              53,
              106,
              98,
              50,
              48,
              105,
              76,
              67,
              74,
              112,
              89,
              88,
              81,
              105,
              79,
              106,
              69,
              51,
              78,
              84,
              77,
              121,
              78,
              84,
              107,
              49,
              79,
              84,
              74,
              57,
              46,
              111,
              109,
              119,
              117,
              105,
              77,
              117,
              95,
              90,
              77,
              53,
              69,
              103,
              95,
              51,
              68,
              108,
              115,
              68,
              117,
              78,
              69,
              122,
              95,
              117,
              86,
              114,
              83,
              104,
              78,
              51,
              52,
              83,
              104,
              55,
              73,
              57,
              109,
              106,
              55,
              86,
              100,
              89,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              110,
              105,
              112,
              117,
              110,
              97,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 218,
          "responseSize": 245
        },
        "id": "9402a2fc-aebb-4dc6-b0c3-99ab777066b0",
        "assertions": [
          {
            "assertion": "Get User success - status 200",
            "skipped": false
          },
          {
            "assertion": "Response has user object with required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "559a50d6-fffb-4170-ad13-9e86dcfb3b85",
          "length": 5,
          "cycles": 3,
          "position": 2,
          "iteration": 2,
          "httpRequestId": "05cbd676-65ca-4f71-b705-1e9cd2c9e03b"
        },
        "item": {
          "id": "27be3015-e927-4b60-b8aa-9fb81d2d26cf",
          "name": "POST /articles – Create Article",
          "request": {
            "url": {
              "path": [
                "articles"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"article\": {\r\n    \"title\": \"Title{{random}}\",\r\n    \"description\": \"description\",\r\n    \"body\": \"body\",\r\n    \"tagList\": [\"jaca\", \"testing\"]\r\n  }\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ebb2346e-5657-4105-856a-04091d51b812",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.collectionVariables.set(\"random\", Math.floor(Math.random() * 100000));"
                ],
                "_lastExecutionId": "a275bdf1-b2a6-452d-a11b-afc6fddc959a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "39d82dd9-ae73-495f-957e-f7b620b1b7c9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const res = pm.response.json();\r",
                  "\r",
                  "// 1. Test: status code\r",
                  "pm.test(\"Status code is 201\", () => {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "// 2. Test: Schema validation for successful response\r",
                  "pm.test(\"Article object has all required keys\", () => {\r",
                  "    pm.expect(res).to.have.property(\"article\");\r",
                  "\r",
                  "    // Check keys of article\r",
                  "    pm.expect(res.article).to.have.all.keys(\r",
                  "        \"slug\",\r",
                  "        \"title\",\r",
                  "        \"description\",\r",
                  "        \"body\",\r",
                  "        \"createdAt\",\r",
                  "        \"updatedAt\",\r",
                  "        \"tagList\",\r",
                  "        \"author\",\r",
                  "        \"favorited\",\r",
                  "        \"favoritesCount\"\r",
                  "    );\r",
                  "\r",
                  "    // Check author keys\r",
                  "    pm.expect(res.article.author).to.have.all.keys(\r",
                  "        \"username\",\r",
                  "        \"bio\",\r",
                  "        \"image\",\r",
                  "        \"following\",\r",
                  "        \"followersCount\"\r",
                  "    );\r",
                  "\r",
                  "    // Save slug for use in update/delete requests\r",
                  "    pm.environment.set(\"slug\", res.article.slug);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "c085524b-64f8-4a57-9e3d-69a273fe9100"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "conduit-realworld-example-app",
              "fly",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5pcHVuYUBnbWFpbC5jb20iLCJpYXQiOjE3NTMyNTk1OTJ9.omwuiMu_ZM5Eg_3DlsDuNEz_uVrShN34Sh7I9mj7VdY"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d52fd539-e8c4-45de-8132-637611a0093b",
              "system": true
            },
            {
              "key": "Host",
              "value": "conduit-realworld-example-app.fly.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "147",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"article\": {\r\n    \"title\": \"Title21385\",\r\n    \"description\": \"description\",\r\n    \"body\": \"body\",\r\n    \"tagList\": [\"jaca\", \"testing\"]\r\n  }\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "25eec9b9-140c-420a-98be-3eade7dec5f4",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"158-5uqQncykdgrFAQ7te4qPvJH1wIw\""
            },
            {
              "key": "date",
              "value": "Wed, 23 Jul 2025 08:33:16 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "server",
              "value": "Fly/b74a496ea (2025-07-22)"
            },
            {
              "key": "via",
              "value": "1.1 fly.io, 1.1 fly.io"
            },
            {
              "key": "fly-request-id",
              "value": "01K0V6MQ1PBEGA4VGMNEQR50JG-arn"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              58,
              123,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              105,
              116,
              108,
              101,
              50,
              49,
              51,
              56,
              53,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              105,
              116,
              108,
              101,
              50,
              49,
              51,
              56,
              53,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              98,
              111,
              100,
              121,
              34,
              58,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              51,
              84,
              48,
              56,
              58,
              51,
              51,
              58,
              49,
              54,
              46,
              57,
              51,
              48,
              90,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              51,
              84,
              48,
              56,
              58,
              51,
              51,
              58,
              49,
              54,
              46,
              57,
              50,
              52,
              90,
              34,
              44,
              34,
              116,
              97,
              103,
              76,
              105,
              115,
              116,
              34,
              58,
              91,
              34,
              106,
              97,
              99,
              97,
              34,
              44,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              97,
              117,
              116,
              104,
              111,
              114,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              105,
              112,
              117,
              110,
              97,
              32,
              74,
              97,
              121,
              97,
              119,
              97,
              114,
              100,
              97,
              110,
              97,
              34,
              44,
              34,
              98,
              105,
              111,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              102,
              111,
              108,
              108,
              111,
              119,
              101,
              114,
              115,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              125,
              44,
              34,
              102,
              97,
              118,
              111,
              114,
              105,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              102,
              97,
              118,
              111,
              114,
              105,
              116,
              101,
              115,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 229,
          "responseSize": 344
        },
        "id": "27be3015-e927-4b60-b8aa-9fb81d2d26cf",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false
          },
          {
            "assertion": "Article object has all required keys",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "675bef2b-ecb0-4ed6-b7f4-bc2c2eef5688",
          "length": 5,
          "cycles": 3,
          "position": 3,
          "iteration": 2,
          "httpRequestId": "85b26590-f560-4dca-9e2b-60ecedefd55c"
        },
        "item": {
          "id": "1bec81c6-64e3-48ee-bcb6-c8a00ae7ef53",
          "name": "PUT /articles/:slug – Update Article",
          "request": {
            "url": {
              "path": [
                "articles",
                "{{slug}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"article\": {\r\n    \"title\": \"{{slug}} - updated\",\r\n    \"description\": \"updated description\",\r\n    \"body\": \"updated body\",\r\n    \"tagList\": [\"jaca\", \"testing\"]\r\n  }\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc07c821-f900-475a-81cf-7003e15644cd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test 1: Status code is 200\r",
                  "pm.test(\"Status code is 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test 2: Schema validation for successful response and updated field validation\r",
                  "pm.test(\"Article Updated: keys and updated fields\", () => {\r",
                  "    const res = pm.response.json();\r",
                  "\r",
                  "    // Check article keys\r",
                  "    pm.expect(res).to.have.property(\"article\");\r",
                  "    pm.expect(res.article).to.have.all.keys(\r",
                  "        \"slug\",\r",
                  "        \"title\",\r",
                  "        \"description\",\r",
                  "        \"body\",\r",
                  "        \"createdAt\",\r",
                  "        \"updatedAt\",\r",
                  "        \"tagList\",\r",
                  "        \"author\",\r",
                  "        \"favorited\",\r",
                  "        \"favoritesCount\"\r",
                  "    );\r",
                  "\r",
                  "    // Check updated values\r",
                  "    pm.expect(res.article.title).to.include(\"updated\");\r",
                  "    pm.expect(res.article.description).to.eql(\"updated description\");\r",
                  "    pm.expect(res.article.body).to.eql(\"updated body\");\r",
                  "    pm.expect(res.article.tagList).to.include(\"jaca\");\r",
                  "\r",
                  "    // Save updated slug\r",
                  "    pm.environment.set(\"slug\", res.article.slug);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "70fa1f23-f1e4-4938-96c2-66f5088abcb7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "articles",
              "title21385"
            ],
            "host": [
              "conduit-realworld-example-app",
              "fly",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5pcHVuYUBnbWFpbC5jb20iLCJpYXQiOjE3NTMyNTk1OTJ9.omwuiMu_ZM5Eg_3DlsDuNEz_uVrShN34Sh7I9mj7VdY"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b977a298-1604-4e1d-a19f-1c2e7e1b7bb5",
              "system": true
            },
            {
              "key": "Host",
              "value": "conduit-realworld-example-app.fly.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "173",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"article\": {\r\n    \"title\": \"title21385 - updated\",\r\n    \"description\": \"updated description\",\r\n    \"body\": \"updated body\",\r\n    \"tagList\": [\"jaca\", \"testing\"]\r\n  }\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "0dc4cecf-a856-4c1a-9dca-b44cca34fbbc",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"17c-+aXpQ708NGrnGqk8h2VYeYjjGi8\""
            },
            {
              "key": "date",
              "value": "Wed, 23 Jul 2025 08:33:17 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            },
            {
              "key": "server",
              "value": "Fly/b74a496ea (2025-07-22)"
            },
            {
              "key": "via",
              "value": "1.1 fly.io, 1.1 fly.io"
            },
            {
              "key": "fly-request-id",
              "value": "01K0V6MQBMBBM1Q8JSBKH7YZCS-arn"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              58,
              123,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              105,
              116,
              108,
              101,
              50,
              49,
              51,
              56,
              53,
              45,
              45,
              45,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              116,
              105,
              116,
              108,
              101,
              50,
              49,
              51,
              56,
              53,
              32,
              45,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              98,
              111,
              100,
              121,
              34,
              58,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              32,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              51,
              84,
              48,
              56,
              58,
              51,
              51,
              58,
              49,
              54,
              46,
              57,
              50,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              51,
              84,
              48,
              56,
              58,
              51,
              51,
              58,
              49,
              55,
              46,
              50,
              53,
              48,
              90,
              34,
              44,
              34,
              116,
              97,
              103,
              76,
              105,
              115,
              116,
              34,
              58,
              91,
              34,
              106,
              97,
              99,
              97,
              34,
              44,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              97,
              117,
              116,
              104,
              111,
              114,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              105,
              112,
              117,
              110,
              97,
              32,
              74,
              97,
              121,
              97,
              119,
              97,
              114,
              100,
              97,
              110,
              97,
              34,
              44,
              34,
              98,
              105,
              111,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              102,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              102,
              111,
              108,
              108,
              111,
              119,
              101,
              114,
              115,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              125,
              44,
              34,
              102,
              97,
              118,
              111,
              114,
              105,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              102,
              97,
              118,
              111,
              114,
              105,
              116,
              101,
              115,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 174,
          "responseSize": 380
        },
        "id": "1bec81c6-64e3-48ee-bcb6-c8a00ae7ef53",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Article Updated: keys and updated fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5623f165-9a5e-4946-bdc3-e54aa3592633",
          "length": 5,
          "cycles": 3,
          "position": 4,
          "iteration": 2,
          "httpRequestId": "9a2a2820-4162-4742-9a83-36fb6a6e9633"
        },
        "item": {
          "id": "d7c7feb0-18cf-4298-98f1-25e77e3da134",
          "name": "DELETE /articles/:slug – Delete Article",
          "request": {
            "url": {
              "path": [
                "articles",
                "{{slug}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "16d7599c-ddbf-41fa-920e-e6cf17d41aa1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test 1: Status code is 200\r",
                  "pm.test(\"Status code is 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test 2: Schema validation for successful response and article Deleted message validation\r",
                  "pm.test(\"Article Deleted message is correct\", () => {\r",
                  "    const res = pm.response.json();\r",
                  "\r",
                  "    pm.expect(res).to.have.property(\"message\");\r",
                  "    pm.expect(res.message).to.have.property(\"body\").that.is.an(\"array\");\r",
                  "    pm.expect(res.message.body[0]).to.include(\"Article deleted successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "0ec096d8-4d6d-4542-a658-c5432cf9671c"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6058fb91-b4df-4f34-835a-7ebc14bc60ad",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "2b504d42-22be-4dc0-9905-216139cc2d46"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "articles",
              "title21385---updated"
            ],
            "host": [
              "conduit-realworld-example-app",
              "fly",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5pcHVuYUBnbWFpbC5jb20iLCJpYXQiOjE3NTMyNTk1OTJ9.omwuiMu_ZM5Eg_3DlsDuNEz_uVrShN34Sh7I9mj7VdY"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b2a82b11-7599-431c-bc9a-8034dd505b90",
              "system": true
            },
            {
              "key": "Host",
              "value": "conduit-realworld-example-app.fly.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "2be6f4a9-2ec3-4ad4-a56f-5887223c3524",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"35-pGKoxX2y9ZLvz/mIoVg8bPXXgts\""
            },
            {
              "key": "date",
              "value": "Wed, 23 Jul 2025 08:33:17 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "server",
              "value": "Fly/b74a496ea (2025-07-22)"
            },
            {
              "key": "via",
              "value": "1.1 fly.io, 1.1 fly.io"
            },
            {
              "key": "fly-request-id",
              "value": "01K0V6MQKA9EP517RF6HH3V25D-arn"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              123,
              34,
              98,
              111,
              100,
              121,
              34,
              58,
              91,
              34,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              93,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 277,
          "responseSize": 53
        },
        "id": "d7c7feb0-18cf-4298-98f1-25e77e3da134",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Article Deleted message is correct",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 3420
    },
    "failures": [],
    "error": null
  }
}